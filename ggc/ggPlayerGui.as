package com.mobile.ggc {		import flash.display.MovieClip;	import flash.events.Event;	import flash.text.StyleSheet;	import flash.text.Font;	import flash.text.TextField;	import flash.system.System;	import flash.events.TextEvent;	public class ggPlayerGui extends MovieClip {		private var _teamName; // this will come from component panel		private var player:ggPlayer; //references the engine's player.		private var sheet:StyleSheet = new StyleSheet;		private var ht_template:XML = <html><body><h4 /><div><a href="event:0"/><br /><p /></div><br /><div><a href="event:1" /><br /><p /></div></body></html>;		//private var guiView:Object = [];		[Inspectable]		public function set teamName(s:String):void		{			_teamName = s;			this.teamField.text = _teamName;			this.bg.gotoAndStop(_teamName);		}				public function set Players(ps:ggPlayers):void		{			this.player = ps.playerRef(_teamName) as ggPlayer;			trace(_teamName+"'s Player reference set::"+player.team);			player.addEventListener(PlayerEvent.VIEW_CHANGED, updateView);		}				public function ggPlayerGui() {			// constructor code			this.addEventListener(Event.ADDED_TO_STAGE, init);					}		///BEGIN SETUP		private function init(e:Event):void		{			setStyles();			bodyField.styleSheet = sheet;											}				private function setStyles():void		{			bodyField.multiline = true;			bodyField.wordWrap = true;			bodyField.embedFonts = true;			bodyField.condenseWhite = true;						var headerFont:Font = new regular_face();			var boldFont:Font = new bold_face();						var headerStyle:Object = {display:"inline", fontFamily:headerFont.fontName, color: "#000000", fontSize:20, letterSpacing: -1, textIndent:-120};			var bodyStyle:Object = {display:"block", fontFamily:headerFont.fontName, fontSize:15,  letterSpacing: 0, textIndent:0};			var boldStyle:Object = {display:"block", fontFamily:headerFont.fontName, fontSize:16,  letterSpacing: 1, textIndent:0};			sheet.setStyle("p", bodyStyle);			sheet.setStyle("a", headerStyle);			sheet.setStyle(".bold", boldStyle);		}				/*private function setStyles():void{					var h1:Object = new Object();			h1.fontWeight = "bold";			h1.color = "#FF0000";			h1.fontSize = 30;			//Create a Style to simulate a:link tags			var p:Object = new Object();			p.color = "#00FF00";			p.fontSize = 25;			var pHover:Object = new Object();			pHover.fontSize = 25;			pHover.color = "#cccccc";			 			var sheet:StyleSheet = new StyleSheet();			sheet.setStyle("h1", h1);			sheet.setStyle("p", p);			sheet.setStyle("p:hover", pHover);		}*/				///END SETUP///THE "MEAT"		private function updateView(p:PlayerEvent):void //Called each time a card is dealt, or something changes		{						turnLed.status = player.active; //synch status "led" and player active status			var guiView:Object = p.data; // get the cardView 			(guiView.cardType == "choice")? parseDecision(guiView) : parseIssue(guiView) ;					}					/*[[Topic, Body],[topic, Body]]*/ 		private function parseDecision(g:Object ):void		{			var ht:XML = new XML(ht_template);			var i:Number = 0;						for each (var o:* in g){				if(o is String){				}else{					ht.body.div[i].a = o.Topic;					ht.body.div[i].p = o.Body;					i++;				}							}			bodyField.htmlText = ht.toXMLString();			bodyField.styleSheet = sheet;			bodyField.addEventListener(TextEvent.LINK, choice);			System.disposeXML(ht);			ht=null;						}				private function parseIssue(g:Object ):void		{			g = g[this._teamName]; //strip down to just this teams relevant info.			var ht:XML = new XML(ht_template);			var i:Number = 0;											ht.body.div[i].a = g.Topic;					ht.body.div[i].p = g.Body;															bodyField.htmlText = ht.toXMLString();			bodyField.styleSheet = sheet;			bodyField.addEventListener(TextEvent.LINK, choice);			System.disposeXML(ht);			ht=null;						}				private function choice(e:TextEvent):void		{			var ID:Number = Number(e.text);			player.submitDecision(ID);			trace(e.text);		}	}	}
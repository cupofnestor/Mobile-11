package com.mobile.signalFlags {		import flash.display.MovieClip;	import flash.events.KeyboardEvent;	import flash.events.Event;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.utils.getQualifiedClassName;	import flash.utils.getDefinitionByName;	import flash.net.URLRequest;	import flash.net.URLLoader;	import com.nestor.elements.kiosk;	//remove	public class master extends kiosk {		public static var config:XML;		var keyboardActive:Boolean=true;		var painting:ship;		var mess:paper;		var card:finished_card;		var dict:dictionary;				public function master() {			// constructor code			//replace with keyboard dispatch from custom class			//setupPainting();			addEventListener(Event.ADDED_TO_STAGE, init);			getConfig();		}				private function postConfig():void{			this.addEventListener("getConfig", configHandler);			dict = new dictionary();			addChild(dict);			stage.addEventListener(KeyboardEvent.KEY_DOWN, dictKeyDownHandler);		}						//ADD to kiosk2.as		private function configHandler(e:Event):void		{			//Get full classname i.e.  com.mobile.signalFlags::dictionary			var clName:String = getQualifiedClassName(e.target);			//create class to reference 			var objClass:Class = Class(getDefinitionByName(clName));   						//shorten className to reference XML;			var attName:String = clName.split("::")[1];						//create link to Event target based on ref class			var obj = e.target as objClass;						//Find appropriate config section for localized config of target.			var _cfg:XML = new XML(config.section.(@as3class == attName));			obj.cfg = _cfg;		}		 			//ADD to kiosk2.as		private function getConfig()			{				//var _cfg:XML = new XML("<root><section as3class=\"dictionary\"><a>woot</a><b>food</b></section><bar>toos</bar></root>");								var _cfg:XML;				var req:URLRequest = new URLRequest("config.xml");				var ldr:URLLoader = new URLLoader();				ldr.load(req);				ldr.addEventListener(Event.COMPLETE, configLoaded);							}					private function  configLoaded(e:Event):void			{				var _cfg = new XML(e.target.data);				config = _cfg;								postConfig();			} 				//Creates instance of ship painting with animation/sound and adds listeners for key interrupt.		private function setupPainting():void		{			painting = new ship();			addChildAt(painting,0);			stage.addEventListener(KeyboardEvent.KEY_DOWN, paintingActive);			mess = painting.paperMessage("Use the flags to create your own message. Then email it to yourself or to a friend.","Traditionally only one mast and only five flags would be used. You can use up to ten flags on two masts for your message. When you're done press Next. Press Delete if you want to delete a flag. Press Exit if you want to exit. \r \r Press any key to continue",2000, false);					}				//activates message creation via key events on painting.		private function paintingActive(k:KeyboardEvent):void		{			mess.off();			stage.removeEventListener(KeyboardEvent.KEY_DOWN, paintingActive);			painting.addEventListener("messageComplete", messageCompleteHandler );			stage.addEventListener(KeyboardEvent.KEY_DOWN, paintingKeyDownHandler);		}				//if keyBoardActive, attempts to add flag to painting, redundancy handled by ship.as		private function paintingKeyDownHandler(k:KeyboardEvent):void		{			stage.removeEventListener(KeyboardEvent.KEY_DOWN, paintingKeyDownHandler);			////trace("::MASTER:: Keyboard Event:"+k);			(keyboardActive) ? painting.addFlag(k) : null;			painting.addEventListener("resetKeyboard", resetKeyboard);		}				//adds keydown handler		private function resetKeyboard(e:Event):void		{			////trace("::MASTER:: Keyboard reset");			stage.addEventListener(KeyboardEvent.KEY_DOWN, paintingKeyDownHandler);		}						//visitor has decided their message is complete, looks for confirmation to "submit" the message		private function messageCompleteHandler(e:Event):void		{			////trace("MASTER :: messageComplete");			mess = painting.paperMessage("Congratulations...","Your message is complete! To view and send your message via email, press any key.",99000,false);			painting.addEventListener("resetKeyboard", resetKeyboard);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, paintingKeyDownHandler);			painting.removeEventListener("messageComplete", messageCompleteHandler );			stage.addEventListener(KeyboardEvent.KEY_DOWN, submitMessage);		}						//Clears the message box from ship, and waits to build the image to submit.		private function submitMessage(e:Event):void		{			stage.removeEventListener(KeyboardEvent.KEY_DOWN, submitMessage);			mess.addEventListener("paperOff", makeCard);			mess.off();		}				//makes an image of user's card for email/posting		private function makeCard(e:Event):void		{						mess.removeEventListener("paperOff", makeCard);			stage.removeEventListener(KeyboardEvent.KEY_DOWN, paintingKeyDownHandler);			mess = null;						//create new instance of the ship/flip card payoff			var flipCard:shipFlip;			flipCard = new shipFlip(painting.snap());			addChild(flipCard);						//flipCard.y=540;			//for preview only.			mess = painting.paperMessage("The End, for now","The message preview has been created, the next step is to add Email-ability.  \r \r  His [ESC] to reset.",99000,false);			stage.addEventListener(KeyboardEvent.KEY_DOWN, TMPresetHandler);		}				//Temporary reset method		public function TMPresetHandler(e:KeyboardEvent):void		{			stage.removeEventListener(KeyboardEvent.KEY_DOWN, TMPresetHandler);			//trace("::MAIN:: TMPresetHandler::"+e);								(e.charCode == 27) ? exitHandler(e) : stage.addEventListener(KeyboardEvent.KEY_DOWN, TMPresetHandler);;							}						//REsets the painting.		private function exitHandler(e:Event):void		{						removeChild(painting);			painting = new ship();			setupPainting();		}				//clears the card/flip payoff		private function killCard(e:Event):void		{			removeChild(card);			card = null;					}				private function dictKeyDownHandler(k:KeyboardEvent):void		{			//stage.removeEventListener(KeyboardEvent.KEY_DOWN, paintingKeyDownHandler);			//trace("::MASTER:: Keyboard Event:"+k.charCode);						dict.flip(k.charCode);		}					}	}
package com.mobile.signalFlags {		import flash.display.MovieClip;	import caurina.transitions.*;	import flash.events.Event;	import com.nestor.elements.soundLoop;	public class pole extends MovieClip {		//holds the message as characters		var word:Array = new Array();		//holds DisplayObject flags.		var flags:Array = new Array(0);		var letter:String;		var maxFlags:Number = 5;		var _initY:Number;		var lastFlag:Boolean=false;		var squeak:soundLoop;		var sqURL:String="snd/squeak.mp3";		//ad to cfg		var sqV:Number = 0.2;						public function pole() {			// constructor code			squeak = new soundLoop(sqURL,sqV);			this.addEventListener(Event.ADDED_TO_STAGE, init);		}				private function init(e:Event):void		{			_initY = this.height;					}				public function resetPole():void		{						//reset array			word = new Array();			//get number of flags			var i:Number = flags.length;						for  (i; i > 0 ; i--){				var f:flagWave = flags.pop();				f.lower();				f.addEventListener("flagDown",flagReset)			}		}				private function flagReset(e:Event):void		{			var dFlag:flagWave = e.target as flagWave;			removeChild(dFlag);			e.target.removeEventListener("flagDown", flagReset)					}												public function addFlag(l:String):void		{			var largo:Number = word.length;			//trace("::POLE:: Attempting to add Flag :: "+l+" Array Length before adding = "+largo);			letter = l;			newFlag();		}				private function newFlag():void		{			squeak.stopLoop();			//fid is one-based			var fid = word.push(letter);			// test for last flag			lastFlag = (fid == maxFlags) ? true : false;						//trace("::POLE:: Flag Checked, making new Flag, lastFlag is"+lastFlag);			var thisFlag:flagWave = new flagWave(letter);						//n is zero-based			var n:Number = flags.push(thisFlag)-1;			thisFlag.width *= 0.17;			thisFlag.height *= 0.17;;						thisFlag.initY = _initY;			thisFlag.targetY= thisFlag.height*(n%5)			this.addChild(thisFlag);			squeak.randomOffset();			squeak.startLoop();						thisFlag.addEventListener("flagUp", flagUp);		}						public function removeFlag():void		{			squeak.stopLoop();			var delFlag:flagWave = flags.pop();			word.pop();			//removeChild(delFlag);			delFlag.lower();			squeak.randomOffset();			squeak.startLoop();			delFlag.addEventListener("flagDown",flagDown);		}							private function flagUp(e:Event):void		{			e.target.removeEventListener("flagUp", flagUp)			squeak.stopLoop();			(lastFlag) ? poleFull() : dispatchEvent(new Event("resetKeyboard",true));		}				private function flagDown(e:Event):void		{			var dFlag:flagWave = e.target as flagWave;			removeChild(dFlag);			e.target.removeEventListener("flagDown", flagDown)			squeak.stopLoop();			dispatchEvent(new Event("resetKeyboard",false));		}				private function poleFull():void		{			squeak.stopLoop();			trace("::POLE:: Pole is FULL!!");			dispatchEvent(new Event("poleFull"));		}			}}
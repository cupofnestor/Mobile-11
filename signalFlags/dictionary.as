package com.mobile.signalFlags {	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.display.MovieClip;	import caurina.transitions.*;	import com.nestor.elements.jukeBox;	import flash.events.KeyboardEvent;	public class dictionary extends MovieClip{		public var _cfg:XML;		private var defList:XMLList;		private var defFile:String;		public var book:Array = new Array();		private var snds:jukeBox;		private var tID,lastID:Number = 999;		private var lastChar:uint;		private var paper:dict_paper = new dict_paper();		public function dictionary() {			// constructor code			this.addEventListener(Event.ADDED_TO_STAGE, init);					}				public function set kbActive(b:Boolean):void		{			(b) ? activateKeyboard() : deactivateKeyboard();		}				private function activateKeyboard():void		{			(!(stage.hasEventListener(KeyboardEvent.KEY_DOWN))) ? stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler) : null;		}				private function deactivateKeyboard():void		{			(stage.hasEventListener(KeyboardEvent.KEY_DOWN)) ? stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler) : null;		}				public function init(e:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, init);			this.dispatchEvent(new Event("getConfig", true));			addChild(paper);			paper.x = -600;			paper.rotation = 90;					}				public function go():void		{			Tweener.addTween(this.paper, {x:0, rotation:0, time:1, transition:"linear"});		}						public function halt():void		{			Tweener.addTween(this.paper, {x:-600, rotation:90, time:1, transition:"linear"});			book[tID].off()			book[tID].addEventListener("pagesOff", removePageAsChild);		}				public function set cfg(val:XML):void		{			_cfg=val;			defFile = _cfg.definitions.toString();			loadDef();			jukeSetup();		}				private function loadDef():void		{			var req:URLRequest= new URLRequest(defFile);			var ldr:URLLoader=new URLLoader(req);			ldr.addEventListener(Event.COMPLETE, loadComplete);		}		private function jukeSetup():void		{			var sArr:Array = new Array();			for each (var s:String in _cfg.jukeBox.snd)			{				sArr.push(s);							}			snds =  new jukeBox(sArr);			snds.vol = 0.5;		}		private function loadComplete(e:Event):void		{			var _ldr:URLLoader = URLLoader(e.target);          			_ldr.removeEventListener(Event.COMPLETE, loadComplete);			var xDefs:XML = new XML(_ldr.data);			defList=new XMLList(xDefs.ooo_sheet);			buildBook();					}				private function buildBook():void		{			for each (var page:XML in defList.ooo_row)			{				var _page_mc:dict_page = new dict_page(new XML(_cfg.page));				_page_mc.def = page;				book[page.id] = _page_mc;			}		}				private function keyDownHandler(k:KeyboardEvent):void		{			//stage.removeEventListener(KeyboardEvent.KEY_DOWN, paintingKeyDownHandler);			//trace("::MASTER:: Keyboard Event:"+k.charCode);			( k.charCode == 9 ) ? exitHandler() : flip(k.charCode);		}						private function exitHandler():void		{			kbActive=false;			halt();						dispatchEvent(new Event("exit"));		}		//method to flip pages		public function flip(_char:uint):void		{						if(_char != lastChar)			{				kbActive = false;				lastChar = _char;				var _key:String = String.fromCharCode(_char)				var node:XML = new XML(defList.ooo_row.(key == _key));				//trace("XMLNODE:: \r"+node);				lastID = tID;				tID = node.id;				removePages();				addChild(book[tID]);				book[tID].addEventListener("pagesOn", pageOnHandler);				snds.playRand();			}		}				private function removePages():void		{			if(lastID <= book.length) {				trace("Removing page : "+lastID);				book[lastID].off()				book[lastID].addEventListener("pagesOff", removePageAsChild);			}		} 				private function removePageAsChild(e:Event)		{			var mc:MovieClip = e.target as MovieClip;			removeChild(mc);		}				private function pageOnHandler(e:Event):void		{			book[tID].removeEventListener("pagesOn", pageOnHandler);			kbActive = true;		}	}	}
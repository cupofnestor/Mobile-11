package com.mobile.signalFlags {	import flash.events.Event;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.display.MovieClip;			public class dictionary extends MovieClip{		public var _cfg:XML;		private var defList:XMLList;		private var defFile:String;		public var book:Array = new Array();		public function dictionary() {			// constructor code			this.addEventListener(Event.ADDED_TO_STAGE, init);					}				public function init(e:Event):void		{			this.removeEventListener(Event.ADDED_TO_STAGE, init);			this.dispatchEvent(new Event("getConfig", true));		}				public function set cfg(val:XML):void		{			_cfg=val;			defFile = _cfg.definitions.toString();			loadDef();		}				private function loadDef():void		{			var req:URLRequest= new URLRequest(defFile);			var ldr:URLLoader=new URLLoader(req);			ldr.addEventListener(Event.COMPLETE, loadComplete);		}				private function loadComplete(e:Event):void		{			var _ldr:URLLoader = URLLoader(e.target);          			_ldr.removeEventListener(Event.COMPLETE, loadComplete);			var xDefs:XML = new XML(_ldr.data);			defList=new XMLList(xDefs.ooo_sheet);			buildBook();					}				private function buildBook():void		{			for each (var page:XML in defList.ooo_row)			{				var _page_mc:dict_page = new dict_page(new XML(_cfg.page));				_page_mc.def = page;				book[page.id] = _page_mc;			}		}				//method to flip pages		public function flip(_char:uint):void		{			(this.numChildren > 1) ? removeChildAt(1) : null;			var _key:String = String.fromCharCode(_char)			var node:XML = new XML(defList.ooo_row.(key == _key));			trace("XMLNODE:: \r"+node);			var tID:Number = node.id;			addChild(book[tID]);					}	}	}
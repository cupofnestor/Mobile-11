package  com.mobile.GulfLinks {	import shapes.*;	import wck.*;	import flash.display.MovieClip;	import flash.events.*;	import caurina.transitions.*;	import Box2DAS.Common.V2;	import flash.geom.Point;		public class delBody extends BodyShape {		public var isFocus:Boolean = false;		public var focusScale:Number=2;		public var initRad:Number;		public var initLoc:Point;				public override function shapes():void {			circle();			initRad = b2fixtures[0].m_shape.m_radius;		}				//convieniently pass the radius of the circle to lay items on		public function set circleRad(r:Number):void		{			var randomAngle:Number = Math.random()*360;			//in rads			var theta:Number = randomAngle * Math.PI/180;			//picks a random point on the circle.			initLoc = pol2cart(r,theta);			//set the x and y before wck takes over and type becomes Dynamic			this.x = initLoc.x;			this.y = initLoc.y;		}				private function pol2cart(R:Number,Theta:Number):Point		{			var ret:Point = new Point();			ret.x = R*Math.cos(Theta);			ret.y = R*Math.sin(Theta);			return ret;		}				[Inspectable(defaultValue=true)]		public override function set active(v:Boolean):void {			if(b2body) {				//this.visible=false;				(v == true) ? activate() : deactivate();			}			else {				_active = v;				}					}				public override function create():void {			this.gotoAndStop("inactive");			this.restitution = 0.5;			this.linearDamping = 1;			this.fixedRotation = true;			this.friction = 0.03;						super.create();		}				public function activate():void		{			b2body.SetActive(true);			this.visible = true;			this.alpha = 1;			this.mouseEnabled = true;			this.type = (isFocus) ? "Animated" : "Dynamic" ;		}				private function deactivate():void		{			this.type = "Animated";			b2body.SetActive(false);			if(this.x != initLoc.x){				Tweener.addTween(this, {alpha:0, x:initLoc.x, y:initLoc.y, time:0.5, transition:"easeOutQuart", onComplete: deactAnimComplete});			}			else{				this.visible = false;				this.mouseEnabled = false;			}		}						private function deactAnimComplete():void		{			this.visible = false;			this.mouseEnabled = false;		}						public function itemFocus(numItems:Number):void		{				var circ:Number = numItems*100;			var tRad:Number = circ2rad(circ);					isFocus = true;			//multFixt(2);			this.type = "Animated";			this.gotoAndStop("active");			var tmpScale:Number = (tRad*2)/this.width			focusScale = (tmpScale < 1) ? 1 : tmpScale;						var bodyScale = focusScale*1.2;						Tweener.addTween(b2fixtures[0].m_shape, {m_radius: initRad*bodyScale, time:1, transition:"easeOutQuart"});			Tweener.addTween(this, {scaleX:focusScale,scaleY:focusScale, x:0, time:1, transition:"easeOutQuart", onComplete: tweenComplete});			Tweener.addTween(this, {y:0, time:1, transition:"easeOutQuart", onComplete: tweenComplete});		}				private function tweenComplete():void		{			dispatchEvent(new Event("focusComplete"));		}				public function itemBlur():void		{			this.type="Dynamic";			this.scaleX=this.scaleY=1;			b2fixtures[0].m_shape.m_radius = initRad;			isFocus = false;			this.gotoAndStop("inactive");			dispatchEvent(new Event("blurComplete"));		}				private function multFixt(mult:Number):void		{				if(b2fixtures) {				for(var i:int = 0; i < b2fixtures.length; ++i) {					b2fixtures[i].m_shape.m_radius *=mult;				}			}		}				private function circ2rad(c:Number):Number		{			return c/(2*Math.PI);		}	}	}
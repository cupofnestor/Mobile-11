package com.mobile.GulfLinks {		import wck.*;	import com.nestor.tools.cfgloader;	import flash.events.*;	import flash.display.NativeWindow;	import flash.display.StageDisplayState;		public class main extends wck.WCK {		private var cLdr:cfgloader;		private var fLdr:feedLoader = new feedLoader();		private var cfg:XML;		private var manager:metaManager;		private var initTags:Array;				public function main() {			// constructor code			addEventListener(Event.ADDED_TO_STAGE, init);			cLdr = new cfgloader("config.xml");			cLdr.addEventListener(Event.COMPLETE, cfgLoaded);		}				private function init(e:Event):void		{			//create a new manager, with methods to parse and sort DB info			manager = new metaManager(this.wckWorld, this.link_list);		}				//once config is loaded, get a copy and nullify the loader		private function cfgLoaded(e:Event):void		{			cLdr.removeEventListener(Event.COMPLETE, cfgLoaded);			cfg = cLdr.cfg;						//			stage.nativeWindow.x = 1900; //cfg.main.window.@Xoff;			stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;			stage.nativeWindow.alwaysInFront = true;			//						cLdr = null;			initTags = getInitTags(cfg.main.initTags);			getFeed();		}				private function getFeed():void		{			fLdr.cfg = new XML(cfg.feedLoader);			fLdr.addEventListener(Event.COMPLETE, feedLoaded);		}				private function feedLoaded(e:Event):void		{			//manager.addEventListener("loadComplete", setupStage);			manager.feed = fLdr.feed;			startButton.loaded();			startButton.addEventListener("start", go);		}				private function getInitTags(_tags:XMLList):Array		{			var ret:Array = new Array();			for each (var i:String in _tags.tag)			{				ret.push(i);			}			return ret;		}		//pass appropriate config to stage item(s)		private function go(e:Event):void		{						startButton.removeEventListener("start", go);			trace("MAIN received listComplete, adding tags")			//manager.addTags(["environment","pollution","oil"]);			//manager.tagFocus("pollution");			manager.initTags = initTags;			startButton.addEventListener("start", reset);						initTags = null;		}				private function reset(e:Event):void		{			startButton.removeEventListener("start", reset);			manager.reset();			initTags = getInitTags(cfg.main.initTags);			manager.initTags = initTags;			initTags = null;			//initTags = null;			startButton.addEventListener("start", reset);		}	}	}
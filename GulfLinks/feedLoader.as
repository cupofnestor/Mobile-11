package com.mobile.GulfLinks {		import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.events.EventDispatcher;	import flash.errors.*;	import flash.events.*;		public class feedLoader extends EventDispatcher{		private var host,path:String;		public var err:Error;		public var feed:XML;		public function feedLoader() {			// constructor code		}				public function set cfg(_cfg:XML):void		{			host = _cfg.host.@url;			path = _cfg.host.@path;			loadFeed();		}		private function loadFeed():void		{			var fURL:String = host+path;			var req:URLRequest = new URLRequest(fURL);			var ldr:URLLoader = new URLLoader();			configureListeners(ldr);									try {				// statements				ldr.load(req);			} catch (_error:Error) {				// statements				trace("::FEEDLOADER::  ERROR REPORT :: "+_error);				err=_error;				dispatchEvent(new Event("errorReport"));			}		}				private function feedLoaded(e:Event):void		{ 			trace("feedLoader completeHandler: " + e);			removeEventListener(Event.COMPLETE, feedLoaded);			var loader:URLLoader = URLLoader(e.target);            feed = new XML(loader.data);			dispatchEvent(e);		}						 private function configureListeners(dispatcher:IEventDispatcher):void {            dispatcher.addEventListener(Event.COMPLETE, feedLoaded);            dispatcher.addEventListener(Event.OPEN, openHandler);            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);            dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);        }		private function openHandler(event:Event):void {            trace("feedLoader openHandler: " + event);        }        private function progressHandler(event:ProgressEvent):void {            trace("feedLoader progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);        }        private function securityErrorHandler(event:SecurityErrorEvent):void {            trace("feedLoader securityErrorHandler: " + event);        }        private function httpStatusHandler(event:HTTPStatusEvent):void {            trace("feedLoader httpStatusHandler: " + event);        }        private function ioErrorHandler(event:IOErrorEvent):void {            trace("feedLoader ioErrorHandler: " + event);        }	}	}